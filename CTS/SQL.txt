CREATE TABLE Users (user_id SERIAL PRIMARY KEY,  full_name VARCHAR(100) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, city VARCHAR(100) NOT NULL, registration_date DATE NOT NULL);

CREATE TABLE Events (event_id SERIAL PRIMARY KEY, title VARCHAR(200) NOT NULL, description TEXT, city VARCHAR(100) NOT NULL, start_date TIMESTAMP NOT NULL,end_date TIMESTAMP NOT NULL, status VARCHAR(20) CHECK (status IN ('upcoming','completed','cancelled')), organizer_id INT REFERENCES Users(user_id));

CREATE TABLE Sessions ( session_id SERIAL PRIMARY KEY, event_id INT REFERENCES Events(event_id), title VARCHAR(200) NOT NULL, speaker_name VARCHAR(100) NOT NULL, start_time TIMESTAMP NOT NULL, end_time TIMESTAMP NOT NULL);

CREATE TABLE Registrations ( registration_id SERIAL PRIMARY KEY, user_id INT REFERENCES Users(user_id),  event_id INT REFERENCES Events(event_id), registration_date DATE NOT NULL);

CREATE TABLE Feedback ( feedback_id SERIAL PRIMARY KEY, user_id INT REFERENCES Users(user_id),event_id INT REFERENCES Events(event_id), rating INT CHECK (rating BETWEEN 1 AND 5), comments TEXT, feedback_date DATE NOT NULL);


CREATE TABLE Resources ( resource_id SERIAL PRIMARY KEY, event_id INT REFERENCES Events(event_id), resource_type VARCHAR(10) CHECK (resource_type IN ('pdf','image','link')), resource_url VARCHAR(255) NOT NULL, uploaded_at TIMESTAMP NOT NULL);



Exercise 1: User Upcoming Events
Show a list of all upcoming events a user is registered for in their city, sorted by date.

SELECT u.full_name, e.title AS event_title, e.city, e.start_date FROM Users u JOIN Registrations r ON u.user_id = r.user_id JOIN Events e ON r.event_id = e.event_id WHERE e.status = 'upcoming' AND u.city = e.city ORDER BY e.start_date;

Exercise 2: Top Rated Events
Events with the highest average rating, only those with at least 10 feedbacks.
SELECT e.title, AVG(f.rating) AS avg_rating, COUNT(f.feedback_id) AS feedback_count
FROM Events e JOIN Feedback f ON e.event_id = f.event_id GROUP BY e.event_id, e.title HAVING COUNT(f.feedback_id) >= 10 ORDER BY avg_rating DESC;

Exercise 3: Inactive Users
Users who havenâ€™t registered for any events in the last 90 days.

SELECT u.* FROM Users u WHERE u.user_id NOT IN ( SELECT user_id FROM Registrations WHERE registration_date >= CURRENT_DATE - INTERVAL '90 days');

Exercise 4: Peak Session Hours
Count of sessions scheduled between 10 AM to 12 PM for each event.

SELECT e.title, COUNT(s.session_id) AS session_count FROM  Events e JOIN Sessions s ON e.event_id = s.event_id WHERE EXTRACT(HOUR FROM s.start_time) >= 10 AND EXTRACT(HOUR FROM s.end_time) <= 12 GROUP BY e.event_id, e.title;

Exercise 5: Most Active Cities
Top 5 cities with the highest number of distinct user registrations.

SELECT u.city, COUNT(DISTINCT r.user_id) AS user_count FROM Users u JOIN Registrations r ON u.user_id = r.user_id GROUP BY u.city ORDER BY user_count DESC LIMIT 5;

Exercise 6: Event Resource Summary
Number of each type of resource uploaded per event.

SELECT e.title, r.resource_type, COUNT(r.resource_id) AS resource_count FROM Events e JOIN Resources r ON e.event_id = r.event_id GROUP BY e.event_id, e.title, r.resource_type;

Exercise 7: Low Feedback Alerts
Users who gave feedback rating < 3, their comments and event names.

SELECT u.full_name, e.title AS event_title, f.rating, f.comments FROM Feedback f JOIN Users u ON f.user_id = u.user_id JOIN Events e ON f.event_id = e.event_id WHERE f.rating < 3;

Exercise 8: Sessions per Upcoming Event
List upcoming events with count of sessions.

SELECT e.title, COUNT(s.session_id) AS session_count FROM Events e LEFT JOIN Sessions s ON e.event_id = s.event_id WHERE e.status = 'upcoming' GROUP BY e.event_id, e.title;

Exercise 9: Organizer Event Summary
Number of events organized and status counts by each organizer.

SELECT u.full_name, e.status, COUNT(e.event_id) AS event_count FROM Users u JOIN Events e ON u.user_id = e.organizer_id GROUP BY u.full_name, e.status;

Exercise 10: Feedback Gap
Events with registrations but no feedback.

SELECT  e.title FROM Events e JOIN Registrations r ON e.event_id = r.event_id LEFT JOIN Feedback f ON e.event_id = f.event_id WHERE f.event_id IS NULL GROUP BY e.title;

Exercise 11: Daily New User Count
Number of users registered each day in last 7 days.

SELECT registration_date, COUNT(user_id) AS user_count FROM Users WHERE registration_date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY registration_date;

Exercise 12: Event with Maximum Sessions
Event(s) with highest number of sessions.

SELECT e.title, COUNT(s.session_id) AS session_count FROM Events e JOIN Sessions s ON e.event_id = s.event_id GROUP BY e.event_id, e.title ORDER BY session_count DESC LIMIT 1;

Exercise 13: Average Rating per City
Average feedback rating of events per city.

SELECT e.city, AVG(f.rating) AS avg_rating FROM Events e JOIN Feedback f ON e.event_id = f.event_id GROUP BY e.city;

Exercise 14: Most Registered Events
Top 3 events by number of registrations.

SELECT e.title, COUNT(r.registration_id) AS reg_count FROM Events e JOIN Registrations r ON e.event_id = r.event_id GROUP BY e.event_id, e.title ORDER BY reg_count DESC LIMIT 3;

Exercise 15: Event Session Time Conflict
Overlapping sessions in the same event.

SELECT s1.event_id, s1.title AS session1, s2.title AS session2
FROM Sessions s1 JOIN Sessions s2 ON s1.event_id = s2.event_id AND s1.session_id < s2.session_id AND s1.end_time > s2.start_time AND s1.start_time < s2.end_time;

Exercise 16: Unregistered Active Users
Users who registered in last 30 days but no event registrations.

SELECT u.*FROM Users u WHERE u.registration_date >= CURRENT_DATE - INTERVAL '30 days' AND u.user_id NOT IN (SELECT user_id FROM Registrations);

Exercise 17: Multi-Session Speakers
Speakers handling more than one session.

SELECT speaker_name, COUNT(session_id) AS session_count FROM Sessions GROUP BY speaker_name HAVING COUNT(session_id) > 1;

Exercise 18: Resource Availability Check
Events without any uploaded resources.

SELECT e.title FROM Events e LEFT JOIN Resources r ON e.event_id = r.event_id WHERE r.resource_id IS NULL;

Exercise 19: Completed Events with Feedback Summary
Total registrations and avg rating for completed events.

SELECT e.title, COUNT(DISTINCT r.registration_id) AS total_registrations, AVG(f.rating) AS avg_rating FROM Events e LEFT JOIN Registrations r ON e.event_id = r.event_id LEFT JOIN Feedback f ON e.event_id = f.event_id WHERE e.status = 'completed' GROUP BY e.event_id, e.title;

Exercise 20: User Engagement Index
Number of events attended and feedbacks submitted by user.

SELECT u.full_name, COUNT(DISTINCT r.event_id) AS events_attended, COUNT(DISTINCT f.feedback_id) AS feedbacks_given FROM Users u LEFT JOIN Registrations r ON u.user_id = r.user_id LEFT JOIN Feedback f ON u.user_id = f.user_id GROUP BY u.user_id, u.full_name;

Exercise 21: Top Feedback Providers
Top 5 users who submitted most feedback.

SELECT u.full_name,COUNT(f.feedback_id) AS feedback_count FROM Users u JOIN Feedback f ON u.user_id = f.user_id GROUP BY u.user_id, u.full_name ORDER BY feedback_count DESC LIMIT 5;

Exercise 22: Duplicate Registrations Check
Detect if a user is registered multiple times for the same event.

SELECT user_id,event_id,COUNT(registration_id) AS reg_count FROM Registrations GROUP BY user_id, event_id HAVING COUNT(registration_id) > 1;

Exercise 23: Registration Trends
Month-wise registration counts for last 12 months.

SELECT TO_CHAR(registration_date, 'YYYY-MM') AS month, COUNT(registration_id) AS registrations FROM Registrations WHERE registration_date >= CURRENT_DATE - INTERVAL '12 months' GROUP BY month ORDER BY month;

Exercise 24: Average Session Duration per Event
Average session length in minutes for each event.

SELECT  e.title, AVG(EXTRACT(EPOCH FROM (s.end_time - s.start_time)) / 60) AS avg_duration_minutes FROM Events e JOIN Sessions s ON e.event_id = s.event_id GROUP BY e.event_id, e.title;

Exercise 25: Events Without Sessions
Events that currently have no sessions.


SELECT e.title FROM Events e LEFT JOIN Sessions s ON e.event_id = s.event_id WHERE s.session_id IS NULL;

